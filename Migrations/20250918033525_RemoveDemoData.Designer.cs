// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using buildone.Data;

#nullable disable

namespace buildone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918033525_RemoveDemoData")]
    partial class RemoveDemoData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("buildone.Data.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AssignedEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DeploymentType")
                        .HasColumnType("int");

                    b.Property<int>("ImagingType")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PcId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetTag")
                        .IsUnique();

                    b.HasIndex("AssignedEmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PcId")
                        .IsUnique();

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.HasIndex("Status");

                    b.HasIndex("Brand", "Model");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("buildone.Data.AssetHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FromValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ToValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("ActorId");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("AssetHistory");
                });

            modelBuilder.Entity("buildone.Data.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Name");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IT",
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 2,
                            Code = "HR",
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            Code = "FIN",
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("buildone.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("FullName");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("buildone.Data.ImagingJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ImageVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ImagingType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImagingType");

                    b.HasIndex("ScheduledAt");

                    b.HasIndex("Status");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("AssetId", "Status");

                    b.ToTable("ImagingJobs");
                });

            modelBuilder.Entity("buildone.Data.Asset", b =>
                {
                    b.HasOne("buildone.Data.Employee", "AssignedEmployee")
                        .WithMany("Assets")
                        .HasForeignKey("AssignedEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("buildone.Data.Department", "Department")
                        .WithMany("Assets")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedEmployee");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("buildone.Data.AssetHistory", b =>
                {
                    b.HasOne("buildone.Data.Employee", "Actor")
                        .WithMany("AssetHistoryEntries")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("buildone.Data.Asset", "Asset")
                        .WithMany("History")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("buildone.Data.Employee", b =>
                {
                    b.HasOne("buildone.Data.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("buildone.Data.ImagingJob", b =>
                {
                    b.HasOne("buildone.Data.Asset", "Asset")
                        .WithMany("ImagingJobs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("buildone.Data.Employee", "Technician")
                        .WithMany("ImagingJobs")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Asset");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("buildone.Data.Asset", b =>
                {
                    b.Navigation("History");

                    b.Navigation("ImagingJobs");
                });

            modelBuilder.Entity("buildone.Data.Department", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("buildone.Data.Employee", b =>
                {
                    b.Navigation("AssetHistoryEntries");

                    b.Navigation("Assets");

                    b.Navigation("ImagingJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
