@page
@model buildone.Pages.Inventory.IndexModel
@{
    ViewData["Title"] = "Inventory Management";
}

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-boxes me-2 text-primary"></i>Inventory Management
                    </h2>
                    <p class="text-muted mb-0">Track and manage stock levels</p>
                </div>
                <div>
                    <a asp-page="/Inventory/Create" class="btn btn-success">
                        <i class="fas fa-plus me-2"></i>Add New Item
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Total Items</h6>
                            <h3 class="mb-0">@Model.Statistics.TotalItems</h3>
                        </div>
                        <div class="icon-shape bg-primary text-white rounded-circle">
                            <i class="fas fa-boxes"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Out of Stock</h6>
                            <h3 class="mb-0 text-danger">@Model.Statistics.OutOfStock</h3>
                        </div>
                        <div class="icon-shape bg-danger text-white rounded-circle">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Low Stock</h6>
                            <h3 class="mb-0 text-warning">@Model.Statistics.LowStock</h3>
                        </div>
                        <div class="icon-shape bg-warning text-white rounded-circle">
                            <i class="fas fa-exclamation"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">In Stock</h6>
                            <h3 class="mb-0 text-success">@Model.Statistics.InStock</h3>
                        </div>
                        <div class="icon-shape bg-success text-white rounded-circle">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-1">Fully Stocked</h6>
                            <h3 class="mb-0 text-info">@Model.Statistics.FullyStocked</h3>
                        </div>
                        <div class="icon-shape bg-info text-white rounded-circle">
                            <i class="fas fa-layer-group"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Search</label>
                    <input type="text" name="searchTerm" class="form-control" 
                           placeholder="Search by name, SKU, or description..." 
                           value="@Model.SearchTerm">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Category</label>
                    <select name="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category" selected="@(Model.CategoryFilter == category)">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Stock Status</label>
                    <select name="stockStatusFilter" class="form-select">
                        <option value="">All Status</option>
                        <option value="OutOfStock" selected="@(Model.StockStatusFilter == "OutOfStock")">Out of Stock</option>
                        <option value="LowStock" selected="@(Model.StockStatusFilter == "LowStock")">Low Stock</option>
                        <option value="InStock" selected="@(Model.StockStatusFilter == "InStock")">In Stock</option>
                        <option value="FullyStocked" selected="@(Model.StockStatusFilter == "FullyStocked")">Fully Stocked</option>
                        <option value="Overstocked" selected="@(Model.StockStatusFilter == "Overstocked")">Overstocked</option>
                    </select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-search me-1"></i>Search
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Inventory Table -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Item Name</th>
                            <th>SKU</th>
                            <th>Category</th>
                            <th>Quantity</th>
                            <th>Status</th>
                            <th>Location</th>
                            <th>Last Restocked</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Inventories.Any())
                        {
                            @foreach (var item in Model.Inventories)
                            {
                                var stockBadgeClass = item.StockStatus switch
                                {
                                    Data.Enums.StockStatus.OutOfStock => "bg-danger",
                                    Data.Enums.StockStatus.LowStock => "bg-warning",
                                    Data.Enums.StockStatus.InStock => "bg-success",
                                    Data.Enums.StockStatus.FullyStocked => "bg-info",
                                    Data.Enums.StockStatus.Overstocked => "bg-secondary",
                                    _ => "bg-secondary"
                                };

                                var progressPercentage = item.MaximumQuantity > 0 
                                    ? Math.Min((double)item.CurrentQuantity / item.MaximumQuantity * 100, 100) 
                                    : 0;

                                <tr>
                                    <td>
                                        <strong>@item.ItemName</strong>
                                        @if (!string.IsNullOrEmpty(item.Description))
                                        {
                                            <br /><small class="text-muted">@item.Description</small>
                                        }
                                    </td>
                                    <td>@(item.SKU ?? "N/A")</td>
                                    <td><span class="badge bg-light text-dark">@item.Category</span></td>
                                    <td>
                                        <strong>@item.CurrentQuantity @item.Unit</strong>
                                        <div class="progress mt-1" style="height: 5px;">
                                            <div class="progress-bar @stockBadgeClass" style="width: @progressPercentage%"></div>
                                        </div>
                                        <small class="text-muted">Min: @item.MinimumQuantity / Max: @item.MaximumQuantity</small>
                                    </td>
                                    <td>
                                        <span class="badge @stockBadgeClass">
                                            @item.StockStatus.ToString()
                                        </span>
                                    </td>
                                    <td>@(item.StorageLocation ?? "N/A")</td>
                                    <td>@(item.LastRestocked.HasValue ? item.LastRestocked.Value.ToString("MMM dd, yyyy") : "Never")</td>
                                    <td>
                                        <div class="btn-group">
                                            <a asp-page="/Inventory/Details" asp-route-id="@item.Id" 
                                               class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-page="/Inventory/Edit" asp-route-id="@item.Id" 
                                               class="btn btn-sm btn-outline-secondary" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button class="btn btn-sm btn-outline-success" 
                                                    onclick="showRestockModal(@item.Id, '@item.ItemName', @item.CurrentQuantity)" 
                                                    title="Restock">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    onclick="showWithdrawModal(@item.Id, '@item.ItemName', @item.CurrentQuantity)" 
                                                    title="Withdraw">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <i class="fas fa-boxes fa-3x text-muted mb-3"></i>
                                    <p class="text-muted mb-0">No inventory items found.</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @{
                ViewData["PageIndex"] = Model.Inventories.PageIndex;
                ViewData["TotalPages"] = Model.Inventories.TotalPages;
                ViewData["TotalCount"] = Model.Inventories.TotalCount;
                ViewData["PageSize"] = Model.Inventories.PageSize;
            }
            
            @if (Model.Inventories.TotalPages > 1)
            {
                <div class="card-footer bg-light">
                    <partial name="_Pagination" />
                </div>
            }
        </div>
    </div>
</div>

<!-- Restock Modal -->
<div class="modal fade" id="restockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Restock Inventory</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="restockForm">
                    <input type="hidden" id="restockItemId">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Item: <span id="restockItemName"></span></label>
                        <p class="text-muted mb-0">Current Stock: <span id="restockCurrentQty"></span></p>
                    </div>
                    <div class="mb-3">
                        <label for="restockQuantity" class="form-label">Quantity to Add</label>
                        <input type="number" class="form-control" id="restockQuantity" min="1" required>
                    </div>
                    <div class="mb-3">
                        <label for="restockReference" class="form-label">Reference (Optional)</label>
                        <input type="text" class="form-control" id="restockReference" placeholder="PO Number, Invoice, etc.">
                    </div>
                    <div class="mb-3">
                        <label for="restockRemarks" class="form-label">Remarks (Optional)</label>
                        <textarea class="form-control" id="restockRemarks" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitRestock()">
                    <i class="fas fa-check me-2"></i>Restock
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Withdraw Modal -->
<div class="modal fade" id="withdrawModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Withdraw Item from Inventory</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="withdrawForm">
                    <input type="hidden" id="withdrawItemId">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Item: <span id="withdrawItemName"></span></label>
                        <p class="text-muted mb-0">Current Stock: <span id="withdrawCurrentQty"></span></p>
                    </div>
                    <div class="mb-3">
                        <label for="withdrawQuantity" class="form-label">Quantity to Withdraw <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="withdrawQuantity" min="1" required>
                        <small class="text-muted">Enter the amount being taken out</small>
                    </div>
                    <div class="mb-3">
                        <label for="withdrawRemarks" class="form-label">Description/Note <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="withdrawRemarks" rows="3" required 
                                  placeholder="Required: Explain why this item is being withdrawn (e.g., issued to department, consumed, damaged, etc.)"></textarea>
                        <small class="text-danger">This field is required for audit purposes</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitWithdraw()">
                    <i class="fas fa-minus me-2"></i>Withdraw Item
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showRestockModal(itemId, itemName, currentQty) {
            document.getElementById('restockItemId').value = itemId;
            document.getElementById('restockItemName').textContent = itemName;
            document.getElementById('restockCurrentQty').textContent = currentQty;
            document.getElementById('restockQuantity').value = '';
            document.getElementById('restockReference').value = '';
            document.getElementById('restockRemarks').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('restockModal'));
            modal.show();
        }

        function showWithdrawModal(itemId, itemName, currentQty) {
            document.getElementById('withdrawItemId').value = itemId;
            document.getElementById('withdrawItemName').textContent = itemName;
            document.getElementById('withdrawCurrentQty').textContent = currentQty;
            document.getElementById('withdrawQuantity').value = '';
            document.getElementById('withdrawQuantity').max = currentQty;
            document.getElementById('withdrawRemarks').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('withdrawModal'));
            modal.show();
        }

        async function submitRestock() {
            const itemId = document.getElementById('restockItemId').value;
            const quantity = parseInt(document.getElementById('restockQuantity').value);
            const reference = document.getElementById('restockReference').value;
            const remarks = document.getElementById('restockRemarks').value;

            if (!quantity || quantity < 1) {
                alert('Please enter a valid quantity');
                return;
            }

            try {
                const response = await fetch(`/api/inventory/restock/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ quantity, reference, remarks })
                });

                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while restocking');
            }
        }

        async function submitWithdraw() {
            const itemId = document.getElementById('withdrawItemId').value;
            const quantity = parseInt(document.getElementById('withdrawQuantity').value);
            const remarks = document.getElementById('withdrawRemarks').value.trim();

            if (!quantity || quantity < 1) {
                alert('Please enter a valid quantity');
                return;
            }

            if (!remarks || remarks === '') {
                alert('Description/Note is required for audit purposes');
                return;
            }

            try {
                const response = await fetch(`/api/inventory/withdraw/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ quantity, remarks })
                });

                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while withdrawing item');
            }
        }
    </script>
}
