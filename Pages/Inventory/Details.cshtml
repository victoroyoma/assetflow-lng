@page
@model buildone.Pages.Inventory.DetailsModel
@{
    ViewData["Title"] = "Inventory Details";
}

<div class="container py-4">
    <div class="row">
        <div class="col-lg-8">
            <!-- Item Details Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-box me-2"></i>@Model.Inventory.ItemName
                    </h4>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="text-muted small">SKU</label>
                            <p class="mb-0"><strong>@(Model.Inventory.SKU ?? "N/A")</strong></p>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Category</label>
                            <p class="mb-0"><span class="badge bg-primary">@Model.Inventory.Category</span></p>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Inventory.Description))
                    {
                        <div class="mb-3">
                            <label class="text-muted small">Description</label>
                            <p class="mb-0">@Model.Inventory.Description</p>
                        </div>
                    }

                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="text-muted small">Current Quantity</label>
                            <h4 class="mb-0 text-primary">@Model.Inventory.CurrentQuantity @Model.Inventory.Unit</h4>
                        </div>
                        <div class="col-md-3">
                            <label class="text-muted small">Minimum</label>
                            <p class="mb-0">@Model.Inventory.MinimumQuantity @Model.Inventory.Unit</p>
                        </div>
                        <div class="col-md-3">
                            <label class="text-muted small">Maximum</label>
                            <p class="mb-0">@Model.Inventory.MaximumQuantity @Model.Inventory.Unit</p>
                        </div>
                        <div class="col-md-3">
                            <label class="text-muted small">Status</label>
                            <p class="mb-0">
                                @{
                                    var statusBadge = Model.Inventory.StockStatus switch
                                    {
                                        Data.Enums.StockStatus.OutOfStock => "badge bg-danger",
                                        Data.Enums.StockStatus.LowStock => "badge bg-warning",
                                        Data.Enums.StockStatus.InStock => "badge bg-success",
                                        Data.Enums.StockStatus.FullyStocked => "badge bg-info",
                                        Data.Enums.StockStatus.Overstocked => "badge bg-secondary",
                                        _ => "badge bg-secondary"
                                    };
                                }
                                <span class="@statusBadge">@Model.Inventory.StockStatus</span>
                            </p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="text-muted small">Storage Location</label>
                            <p class="mb-0">@(Model.Inventory.StorageLocation ?? "N/A")</p>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Supplier</label>
                            <p class="mb-0">@(Model.Inventory.Supplier ?? "N/A")</p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="text-muted small">Last Restocked</label>
                            <p class="mb-0">@(Model.Inventory.LastRestocked.HasValue ? Model.Inventory.LastRestocked.Value.ToString("MMMM dd, yyyy") : "Never")</p>
                        </div>
                        <div class="col-md-6">
                            <label class="text-muted small">Created</label>
                            <p class="mb-0">@Model.Inventory.CreatedDate.ToString("MMMM dd, yyyy")</p>
                        </div>
                    </div>

                    <!-- Warranty Information -->
                    @if (Model.Inventory.WarrantyStartDate.HasValue || Model.Inventory.WarrantyEndDate.HasValue)
                    {
                        <div class="border-top pt-3 mt-3">
                            <h6 class="text-muted mb-3">
                                <i class="fas fa-shield-alt me-2"></i>Warranty Information
                            </h6>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="text-muted small">Warranty Period</label>
                                    <p class="mb-0">
                                        @if (Model.Inventory.WarrantyPeriodMonths.HasValue)
                                        {
                                            <span>@Model.Inventory.WarrantyPeriodMonths months</span>
                                        }
                                        else
                                        {
                                            <span>N/A</span>
                                        }
                                    </p>
                                </div>
                                <div class="col-md-6">
                                    <label class="text-muted small">Warranty Provider</label>
                                    <p class="mb-0">@(Model.Inventory.WarrantyProvider ?? "N/A")</p>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="text-muted small">Warranty Start</label>
                                    <p class="mb-0">
                                        @(Model.Inventory.WarrantyStartDate.HasValue ? Model.Inventory.WarrantyStartDate.Value.ToString("MMMM dd, yyyy") : "N/A")
                                    </p>
                                </div>
                                <div class="col-md-6">
                                    <label class="text-muted small">Warranty End</label>
                                    <p class="mb-0">
                                        @if (Model.Inventory.WarrantyEndDate.HasValue)
                                        {
                                            <span>@Model.Inventory.WarrantyEndDate.Value.ToString("MMMM dd, yyyy")</span>
                                            @if (Model.Inventory.IsWarrantyExpired)
                                            {
                                                <span class="badge bg-danger ms-2">Expired</span>
                                            }
                                            else if (Model.Inventory.IsWarrantyExpiringSoon)
                                            {
                                                <span class="badge bg-warning ms-2">Expiring Soon (@Model.Inventory.DaysUntilWarrantyExpiry days left)</span>
                                            }
                                            else if (Model.Inventory.HasWarranty)
                                            {
                                                <span class="badge bg-success ms-2">Active (@Model.Inventory.DaysUntilWarrantyExpiry days left)</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>N/A</span>
                                        }
                                    </p>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="row mt-3">
                        <div class="col-md-12">
                            <label class="text-muted small">Last Updated</label>
                            <p class="mb-0">@Model.Inventory.LastUpdated.ToString("MMMM dd, yyyy") by @(Model.Inventory.UpdatedBy ?? "System")</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a asp-page="./Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to List
                    </a>
                    <a asp-page="./Edit" asp-route-id="@Model.Inventory.Id" class="btn btn-primary">
                        <i class="fas fa-edit me-2"></i>Edit
                    </a>
                    <button class="btn btn-success" onclick="showRestockModal(@Model.Inventory.Id, '@Model.Inventory.ItemName', @Model.Inventory.CurrentQuantity)">
                        <i class="fas fa-plus me-2"></i>Restock
                    </button>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Quick Actions Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-success" onclick="showRestockModal(@Model.Inventory.Id, '@Model.Inventory.ItemName', @Model.Inventory.CurrentQuantity)">
                            <i class="fas fa-plus me-2"></i>Add Stock
                        </button>
                        <button class="btn btn-danger" onclick="showWithdrawModal(@Model.Inventory.Id, '@Model.Inventory.ItemName', @Model.Inventory.CurrentQuantity)">
                            <i class="fas fa-minus me-2"></i>Withdraw Item
                        </button>
                        <button class="btn btn-warning" onclick="showAdjustModal(@Model.Inventory.Id, '@Model.Inventory.ItemName', @Model.Inventory.CurrentQuantity)">
                            <i class="fas fa-edit me-2"></i>Adjust Quantity
                        </button>
                    </div>
                </div>
            </div>

            <!-- Stock Level Indicator -->
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Stock Level</h5>
                </div>
                <div class="card-body">
                    @{
                        var percentage = Model.Inventory.MaximumQuantity > 0 
                            ? Math.Min((double)Model.Inventory.CurrentQuantity / Model.Inventory.MaximumQuantity * 100, 100) 
                            : 0;
                        var progressClass = Model.Inventory.StockStatus switch
                        {
                            Data.Enums.StockStatus.OutOfStock => "bg-danger",
                            Data.Enums.StockStatus.LowStock => "bg-warning",
                            Data.Enums.StockStatus.InStock => "bg-success",
                            Data.Enums.StockStatus.FullyStocked => "bg-info",
                            Data.Enums.StockStatus.Overstocked => "bg-secondary",
                            _ => "bg-secondary"
                        };
                    }
                    <div class="progress mb-2" style="height: 25px;">
                        <div class="progress-bar @progressClass" style="width: @percentage%">
                            @Model.Inventory.CurrentQuantity / @Model.Inventory.MaximumQuantity
                        </div>
                    </div>
                    <small class="text-muted">
                        @if (Model.Inventory.IsOutOfStock)
                        {
                            <i class="fas fa-exclamation-circle text-danger me-1"></i><span>Out of stock!</span>
                        }
                        else if (Model.Inventory.IsLowStock)
                        {
                            <i class="fas fa-exclamation-triangle text-warning me-1"></i><span>Low stock - restock soon</span>
                        }
                        else if (Model.Inventory.IsOverstocked)
                        {
                            <i class="fas fa-info-circle text-secondary me-1"></i><span>Overstocked</span>
                        }
                        else
                        {
                            <i class="fas fa-check-circle text-success me-1"></i><span>Stock level is good</span>
                        }
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Transaction History -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="fas fa-history me-2"></i>Transaction History (Audit Trail)
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (Model.Transactions.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date & Time</th>
                                        <th>Type</th>
                                        <th>Quantity Change</th>
                                        <th>Previous</th>
                                        <th>New</th>
                                        <th>Performed By</th>
                                        <th>Reference</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var transaction in Model.Transactions)
                                    {
                                        var badgeClass = transaction.TransactionType switch
                                        {
                                            "Restock" => "badge bg-success",
                                            "Adjustment" => "badge bg-warning",
                                            "Withdrawal" => "badge bg-danger",
                                            _ => "badge bg-secondary"
                                        };

                                        <tr>
                                            <td>@transaction.TransactionDate.ToString("MMM dd, yyyy hh:mm tt")</td>
                                            <td><span class="@badgeClass">@transaction.TransactionType</span></td>
                                            <td>
                                                @if (transaction.Quantity > 0)
                                                {
                                                    <span class="text-success">+@transaction.Quantity</span>
                                                }
                                                else
                                                {
                                                    <span class="text-danger">@transaction.Quantity</span>
                                                }
                                            </td>
                                            <td>@transaction.PreviousQuantity</td>
                                            <td><strong>@transaction.NewQuantity</strong></td>
                                            <td>
                                                <i class="fas fa-user me-1"></i>@(transaction.PerformedBy ?? "System")
                                            </td>
                                            <td>@(transaction.Reference ?? "-")</td>
                                            <td>@(transaction.Remarks ?? "-")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                            <p class="text-muted mb-0">No transaction history available</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Restock Modal -->
<div class="modal fade" id="restockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Restock Inventory</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="restockForm">
                    <input type="hidden" id="restockItemId">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Item: <span id="restockItemName"></span></label>
                        <p class="text-muted mb-0">Current Stock: <span id="restockCurrentQty"></span></p>
                    </div>
                    <div class="mb-3">
                        <label for="restockQuantity" class="form-label">Quantity to Add</label>
                        <input type="number" class="form-control" id="restockQuantity" min="1" required>
                    </div>
                    <div class="mb-3">
                        <label for="restockReference" class="form-label">Reference (Optional)</label>
                        <input type="text" class="form-control" id="restockReference" placeholder="PO Number, Invoice, etc.">
                    </div>
                    <div class="mb-3">
                        <label for="restockRemarks" class="form-label">Remarks (Optional)</label>
                        <textarea class="form-control" id="restockRemarks" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitRestock()">
                    <i class="fas fa-check me-2"></i>Restock
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Adjust Modal -->
<div class="modal fade" id="adjustModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adjust Inventory Quantity</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="adjustForm">
                    <input type="hidden" id="adjustItemId">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Item: <span id="adjustItemName"></span></label>
                        <p class="text-muted mb-0">Current Stock: <span id="adjustCurrentQty"></span></p>
                    </div>
                    <div class="mb-3">
                        <label for="adjustNewQuantity" class="form-label">New Quantity</label>
                        <input type="number" class="form-control" id="adjustNewQuantity" min="0" required>
                    </div>
                    <div class="mb-3">
                        <label for="adjustRemarks" class="form-label">Remarks (Required)</label>
                        <textarea class="form-control" id="adjustRemarks" rows="3" required placeholder="Explain reason for adjustment..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="submitAdjust()">
                    <i class="fas fa-check me-2"></i>Adjust
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Withdraw Modal -->
<div class="modal fade" id="withdrawModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Withdraw Item from Inventory</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="withdrawForm">
                    <input type="hidden" id="withdrawItemId">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Item: <span id="withdrawItemName"></span></label>
                        <p class="text-muted mb-0">Current Stock: <span id="withdrawCurrentQty"></span></p>
                    </div>
                    <div class="mb-3">
                        <label for="withdrawQuantity" class="form-label">Quantity to Withdraw <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="withdrawQuantity" min="1" required>
                        <small class="text-muted">Enter the amount being taken out</small>
                    </div>
                    <div class="mb-3">
                        <label for="withdrawRemarks" class="form-label">Description/Note <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="withdrawRemarks" rows="3" required 
                                  placeholder="Required: Explain why this item is being withdrawn (e.g., issued to department, consumed, damaged, etc.)"></textarea>
                        <small class="text-danger">This field is required for audit purposes</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitWithdraw()">
                    <i class="fas fa-minus me-2"></i>Withdraw Item
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showRestockModal(itemId, itemName, currentQty) {
            document.getElementById('restockItemId').value = itemId;
            document.getElementById('restockItemName').textContent = itemName;
            document.getElementById('restockCurrentQty').textContent = currentQty;
            document.getElementById('restockQuantity').value = '';
            document.getElementById('restockReference').value = '';
            document.getElementById('restockRemarks').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('restockModal'));
            modal.show();
        }

        function showAdjustModal(itemId, itemName, currentQty) {
            document.getElementById('adjustItemId').value = itemId;
            document.getElementById('adjustItemName').textContent = itemName;
            document.getElementById('adjustCurrentQty').textContent = currentQty;
            document.getElementById('adjustNewQuantity').value = currentQty;
            document.getElementById('adjustRemarks').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('adjustModal'));
            modal.show();
        }

        function showWithdrawModal(itemId, itemName, currentQty) {
            document.getElementById('withdrawItemId').value = itemId;
            document.getElementById('withdrawItemName').textContent = itemName;
            document.getElementById('withdrawCurrentQty').textContent = currentQty;
            document.getElementById('withdrawQuantity').value = '';
            document.getElementById('withdrawQuantity').max = currentQty;
            document.getElementById('withdrawRemarks').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('withdrawModal'));
            modal.show();
        }

        async function submitRestock() {
            const itemId = document.getElementById('restockItemId').value;
            const quantity = parseInt(document.getElementById('restockQuantity').value);
            const reference = document.getElementById('restockReference').value;
            const remarks = document.getElementById('restockRemarks').value;

            if (!quantity || quantity < 1) {
                alert('Please enter a valid quantity');
                return;
            }

            try {
                const response = await fetch(`/api/inventory/restock/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ quantity, reference, remarks })
                });

                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while restocking');
            }
        }

        async function submitAdjust() {
            const itemId = document.getElementById('adjustItemId').value;
            const newQuantity = parseInt(document.getElementById('adjustNewQuantity').value);
            const remarks = document.getElementById('adjustRemarks').value;

            if (newQuantity === null || newQuantity < 0) {
                alert('Please enter a valid quantity');
                return;
            }

            if (!remarks || remarks.trim() === '') {
                alert('Please provide a reason for the adjustment');
                return;
            }

            try {
                const response = await fetch(`/api/inventory/adjust/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ newQuantity, remarks })
                });

                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while adjusting inventory');
            }
        }

        async function submitWithdraw() {
            const itemId = document.getElementById('withdrawItemId').value;
            const quantity = parseInt(document.getElementById('withdrawQuantity').value);
            const remarks = document.getElementById('withdrawRemarks').value.trim();

            if (!quantity || quantity < 1) {
                alert('Please enter a valid quantity');
                return;
            }

            if (!remarks || remarks === '') {
                alert('Description/Note is required for audit purposes');
                return;
            }

            try {
                const response = await fetch(`/api/inventory/withdraw/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ quantity, remarks })
                });

                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while withdrawing item');
            }
        }
    </script>
}
