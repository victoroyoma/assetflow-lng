@page
@model buildone.Pages.Assets.IndexModel
@{
    ViewData["Title"] = "Asset Management";
}

@Html.AntiForgeryToken()

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-1">Asset Management</h1>
        <p class="text-muted mb-0">Manage and track all company assets</p>
    </div>
    <div>
        <button type="button" class="btn btn-outline-secondary me-2" data-bs-toggle="modal" data-bs-target="#filterModal">
            <i class="bi bi-funnel"></i> Filters
        </button>
        <a asp-page="./Create" class="btn btn-primary">
            <i class="bi bi-plus-lg"></i> Add Asset
        </a>
    </div>
</div>

<!-- Alert Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["InfoMessage"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <i class="bi bi-info-circle me-2"></i>@TempData["InfoMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title mb-1">@Model.TotalAssets</h4>
                        <p class="card-text mb-0">Total Assets</p>
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-boxes fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title mb-1">@Model.ActiveAssets</h4>
                        <p class="card-text mb-0">Active Assets</p>
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-check-circle fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title mb-1">@Model.MaintenanceAssets</h4>
                        <p class="card-text mb-0">In Maintenance</p>
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-wrench fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-secondary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title mb-1">@Model.UnassignedAssets</h4>
                        <p class="card-text mb-0">Unassigned</p>
                    </div>
                    <div class="align-self-center">
                        <i class="bi bi-question-circle fs-1 opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Search and Filter Bar -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-4">
                <label for="searchTerm" class="form-label">Search Assets</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" id="searchTerm" name="searchTerm" 
                           value="@Model.SearchTerm" placeholder="Search by name, serial number, or tag...">
                </div>
            </div>
            <div class="col-md-2">
                <label for="statusFilter" class="form-label">Status</label>
                <select class="form-select" id="statusFilter" name="statusFilter">
                    <option value="">All Statuses</option>
                    <option value="InStock" selected="@(Model.StatusFilter == "InStock")">In Stock</option>
                    <option value="Active" selected="@(Model.StatusFilter == "Active")">Active</option>
                    <option value="Inactive" selected="@(Model.StatusFilter == "Inactive")">Inactive</option>
                    <option value="Assigned" selected="@(Model.StatusFilter == "Assigned")">Assigned</option>
                    <option value="InDeployment" selected="@(Model.StatusFilter == "InDeployment")">In Deployment</option>
                    <option value="Deployed" selected="@(Model.StatusFilter == "Deployed")">Deployed</option>
                    <option value="Maintenance" selected="@(Model.StatusFilter == "Maintenance")">Maintenance</option>
                    <option value="InRepair" selected="@(Model.StatusFilter == "InRepair")">In Repair</option>
                    <option value="Retired" selected="@(Model.StatusFilter == "Retired")">Retired</option>
                    <option value="Lost" selected="@(Model.StatusFilter == "Lost")">Lost</option>
                </select>
            </div>
            <div class="col-md-2">
                <label for="typeFilter" class="form-label">Type</label>
                <select class="form-select" id="typeFilter" name="typeFilter">
                    <option value="">All Types</option>
                    <option value="Desktop" selected="@(Model.TypeFilter == "Desktop")">Desktop</option>
                    <option value="Laptop" selected="@(Model.TypeFilter == "Laptop")">Laptop</option>
                    <option value="Server" selected="@(Model.TypeFilter == "Server")">Server</option>
                    <option value="Tablet" selected="@(Model.TypeFilter == "Tablet")">Tablet</option>
                    <option value="Phone" selected="@(Model.TypeFilter == "Phone")">Phone</option>
                    <option value="Monitor" selected="@(Model.TypeFilter == "Monitor")">Monitor</option>
                    <option value="Printer" selected="@(Model.TypeFilter == "Printer")">Printer</option>
                    <option value="Other" selected="@(Model.TypeFilter == "Other")">Other</option>
                </select>
            </div>
            <div class="col-md-2">
                <label for="departmentFilter" class="form-label">Department</label>
                <select class="form-select" id="departmentFilter" name="departmentFilter">
                    <option value="">All Departments</option>
                    @foreach (var department in Model.Departments)
                    {
                        <option value="@department.Id" selected="@(Model.DepartmentFilter == department.Id.ToString())">
                            @department.Name
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-outline-primary me-2">Filter</button>
                <a asp-page="./Index" class="btn btn-outline-secondary">Clear</a>
            </div>
        </form>
    </div>
</div>

<!-- Assets Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Assets (@Model.Assets.Count items)</h5>
        <div class="btn-group btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-secondary" onclick="exportAssets()">
                <i class="bi bi-download"></i> Export
            </button>
            <button type="button" class="btn btn-outline-secondary" onclick="toggleBulkActions()">
                <i class="bi bi-check2-square"></i> Bulk Actions
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        @if (Model.Assets.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="assetsTable">
                    <thead class="table-light">
                        <tr>
                            <th width="40">
                                <input type="checkbox" id="selectAll" class="form-check-input">
                            </th>
                            <th>Asset Info</th>
                            <th>Status</th>
                            <th>Assigned To</th>
                            <th>Department</th>
                            <th>Warranty Expiry</th>
                            <th>Last Updated</th>
                            <th width="200">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var asset in Model.Assets)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" class="form-check-input asset-checkbox" value="@asset.Id">
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-bold">@asset.AssetDescription</div>
                                        <small class="text-muted">
                                            @if (!string.IsNullOrEmpty(asset.SerialNumber))
                                            {
                                                <span class="me-2">SN: @asset.SerialNumber</span>
                                            }
                                            @if (!string.IsNullOrEmpty(asset.AssetTag))
                                            {
                                                <span class="badge bg-light text-dark">@asset.AssetTag</span>
                                            }
                                        </small>
                                        @if (!string.IsNullOrEmpty(asset.Notes))
                                        {
                                            <div class="small text-muted mt-1">@asset.Notes</div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @switch (asset.Status.ToString())
                                    {
                                        case "InStock":
                                            <span class="badge bg-primary">In Stock</span>
                                            break;
                                        case "Active":
                                            <span class="badge bg-success">Active</span>
                                            break;
                                        case "Inactive":
                                            <span class="badge bg-secondary">Inactive</span>
                                            break;
                                        case "Assigned":
                                            <span class="badge bg-info">Assigned</span>
                                            break;
                                        case "InDeployment":
                                            <span class="badge bg-warning">In Deployment</span>
                                            break;
                                        case "Deployed":
                                            <span class="badge bg-success">Deployed</span>
                                            break;
                                        case "Maintenance":
                                            <span class="badge bg-warning">Maintenance</span>
                                            break;
                                        case "InRepair":
                                            <span class="badge bg-danger">In Repair</span>
                                            break;
                                        case "Retired":
                                            <span class="badge bg-dark">Retired</span>
                                            break;
                                        case "Lost":
                                            <span class="badge bg-danger">Lost</span>
                                            break;
                                        default:
                                            <span class="badge bg-secondary">@asset.Status</span>
                                            break;
                                    }
                                </td>
                                <td>
                                    @if (asset.AssignedEmployee != null)
                                    {
                                        <div>
                                            <div class="fw-medium">@asset.AssignedEmployee.FullName</div>
                                            <small class="text-muted">@asset.AssignedEmployee.Email</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unassigned</span>
                                    }
                                </td>
                                <td>
                                    @if (asset.Department != null)
                                    {
                                        <span class="badge bg-light text-dark">@asset.Department.Name</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No Department</span>
                                    }
                                </td>
                                <td>
                                    @if (asset.WarrantyExpiry.HasValue)
                                    {
                                        <span class="fw-medium">@asset.WarrantyExpiry.Value.ToString("MMM dd, yyyy")</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td>
                                    <small class="text-muted">@asset.LastUpdated.ToString("MMM dd, yyyy")</small>
                                </td>
                                <td>
                                    <div class="d-flex gap-1">
                                        <!-- Primary Actions -->
                                        <button type="button" class="btn btn-sm btn-outline-info d-flex align-items-center justify-content-center" 
                                                style="width: 32px; height: 32px;" 
                                                title="View Details" 
                                                data-bs-toggle="tooltip"
                                                onclick="showAssetDetailsModal(@asset.Id)">
                                            <i class="bi bi-eye-fill"></i>
                                        </button>
                                        <a asp-page="./Edit" asp-route-id="@asset.Id" 
                                           class="btn btn-sm btn-outline-warning d-flex align-items-center justify-content-center" 
                                           style="width: 32px; height: 32px;" 
                                           title="Edit Asset" 
                                           data-bs-toggle="tooltip">
                                            <i class="bi bi-pencil-fill"></i>
                                        </a>
                                        
                                        <!-- Dropdown for Additional Actions -->
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary d-flex align-items-center justify-content-center" 
                                                    style="width: 32px; height: 32px;" 
                                                    type="button" 
                                                    data-bs-toggle="dropdown" 
                                                    title="More Actions" 
                                                    aria-expanded="false">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end">
                                                <li>
                                                    <h6 class="dropdown-header d-flex align-items-center">
                                                        <i class="bi bi-gear me-2"></i>Asset Actions
                                                    </h6>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                
                                                <!-- View Details -->
                                                <li>
                                                    <a class="dropdown-item d-flex align-items-center" 
                                                       asp-page="./Details" asp-route-id="@asset.Id">
                                                        <i class="bi bi-info-circle text-info me-2"></i>Full Details
                                                    </a>
                                                </li>
                                                
                                                <!-- Duplicate Asset -->
                                                <li>
                                                    <button class="dropdown-item d-flex align-items-center" 
                                                            onclick="duplicateAsset(@asset.Id, '@asset.AssetTag')">
                                                        <i class="bi bi-files text-primary me-2"></i>Duplicate Asset
                                                    </button>
                                                </li>
                                                
                                                <li><hr class="dropdown-divider"></li>
                                                
                                                <!-- Quick Status Change -->
                                                @if (asset.Status.ToString() != "Active")
                                                {
                                                    <li>
                                                        <button class="dropdown-item d-flex align-items-center" 
                                                                onclick="quickStatusChange(@asset.Id, 'Active')">
                                                            <i class="bi bi-check-circle text-success me-2"></i>Mark as Active
                                                        </button>
                                                    </li>
                                                }
                                                @if (asset.Status.ToString() != "Maintenance")
                                                {
                                                    <li>
                                                        <button class="dropdown-item d-flex align-items-center" 
                                                                onclick="quickStatusChange(@asset.Id, 'Maintenance')">
                                                            <i class="bi bi-wrench text-warning me-2"></i>Send to Maintenance
                                                        </button>
                                                    </li>
                                                }
                                                @if (asset.Status.ToString() != "InStock")
                                                {
                                                    <li>
                                                        <button class="dropdown-item d-flex align-items-center" 
                                                                onclick="quickStatusChange(@asset.Id, 'InStock')">
                                                            <i class="bi bi-archive text-secondary me-2"></i>Return to Stock
                                                        </button>
                                                    </li>
                                                }
                                                
                                                <li><hr class="dropdown-divider"></li>
                                                
                                                <!-- Assignment Actions -->
                                                <li>
                                                    <button class="dropdown-item d-flex align-items-center" 
                                                            onclick="showAssignModal(@asset.Id, '@asset.AssetTag')">
                                                        <i class="bi bi-person-plus text-primary me-2"></i>@(asset.AssignedEmployee != null ? "Reassign" : "Assign to Employee")
                                                    </button>
                                                </li>
                                                @if (asset.AssignedEmployee != null)
                                                {
                                                    <li>
                                                        <button class="dropdown-item d-flex align-items-center" 
                                                                onclick="unassignAsset(@asset.Id, '@asset.AssetTag')">
                                                            <i class="bi bi-person-dash text-secondary me-2"></i>Unassign Employee
                                                        </button>
                                                    </li>
                                                }
                                                
                                                <li><hr class="dropdown-divider"></li>
                                                
                                                <!-- Imaging Actions -->
                                                <li>
                                                    <a class="dropdown-item d-flex align-items-center" 
                                                       asp-page="/Imaging/Create" asp-route-assetId="@asset.Id">
                                                        <i class="bi bi-hdd text-info me-2"></i>Create Imaging Job
                                                    </a>
                                                </li>
                                                
                                                <!-- Print Label -->
                                                <li>
                                                    <button class="dropdown-item d-flex align-items-center" 
                                                            onclick="printAssetLabel(@asset.Id, '@asset.AssetTag')">
                                                        <i class="bi bi-printer text-dark me-2"></i>Print Label
                                                    </button>
                                                </li>
                                                
                                                <!-- Export Asset Data -->
                                                <li>
                                                    <button class="dropdown-item d-flex align-items-center" 
                                                            onclick="exportAssetData(@asset.Id, '@asset.AssetTag')">
                                                        <i class="bi bi-download text-success me-2"></i>Export Data
                                                    </button>
                                                </li>
                                                
                                                <!-- History -->
                                                <li>
                                                    <button class="dropdown-item d-flex align-items-center" 
                                                            onclick="showAssetHistory(@asset.Id)">
                                                        <i class="bi bi-clock-history text-secondary me-2"></i>View History
                                                    </button>
                                                </li>
                                                
                                                <li><hr class="dropdown-divider"></li>
                                                
                                                <!-- Danger Zone -->
                                                <li>
                                                    <button class="dropdown-item d-flex align-items-center text-danger" 
                                                            onclick="confirmDelete(@asset.Id, '@asset.AssetTag')">
                                                        <i class="bi bi-trash-fill me-2"></i>Delete Asset
                                                    </button>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            ViewData["PageIndex"] = Model.Assets.PageIndex;
            ViewData["TotalPages"] = Model.Assets.TotalPages;
            ViewData["TotalCount"] = Model.Assets.TotalCount;
            ViewData["PageSize"] = Model.Assets.PageSize;
            
            @if (Model.Assets.TotalPages > 1)
            {
                <div class="card-footer bg-light">
                    <partial name="_Pagination" />
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-inbox display-1 text-muted"></i>
                <h4 class="mt-3">No Assets Found</h4>
                <p class="text-muted">No assets match your current filters.</p>
                <a asp-page="./Create" class="btn btn-primary">Add Your First Asset</a>
            </div>
        }
    </div>
</div>

<!-- Bulk Actions Panel (Hidden by default) -->
<div id="bulkActionsPanel" class="card mt-3" style="display: none;">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center">
            <span id="selectedCount">0 assets selected</span>
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary" onclick="bulkUpdateStatus()">Update Status</button>
                <button type="button" class="btn btn-outline-warning" onclick="bulkAssign()">Assign</button>
                <button type="button" class="btn btn-outline-danger" onclick="bulkDelete()">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the asset "<span id="deleteAssetName"></span>"?</p>
                <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" class="d-inline" id="deleteForm">
                    <input type="hidden" name="id" id="deleteAssetId">
                    <button type="submit" class="btn btn-danger" asp-page-handler="Delete">Delete Asset</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Asset Assignment Modal -->
<div class="modal fade" id="assignModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-person-plus me-2"></i>Assign Asset
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assignForm">
                    <input type="hidden" id="assignAssetId">
                    <div class="mb-3">
                        <label class="form-label">Asset Tag</label>
                        <input type="text" class="form-control" id="assignAssetTag" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="assignEmployeeId" class="form-label">Select Employee <span class="text-danger">*</span></label>
                        <select class="form-select" id="assignEmployeeId" required>
                            <option value="">Choose an employee...</option>
                            @foreach (var employee in Model.Employees)
                            {
                                <option value="@employee.Id">@employee.FullName - @employee.Department?.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="assignNotes" class="form-label">Assignment Notes</label>
                        <textarea class="form-control" id="assignNotes" rows="3" placeholder="Optional notes about this assignment..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitAssignment()">
                    <i class="bi bi-check-lg me-2"></i>Assign Asset
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Asset History Modal -->
<div class="modal fade" id="historyModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-clock-history me-2"></i>Asset History
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="historyContent">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted">Loading asset history...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Create Imaging Job Modal -->
<div class="modal fade" id="imagingJobModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-hdd me-2"></i>Create Imaging Job
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="imagingJobForm">
                    <input type="hidden" id="imagingAssetId">
                    <div class="mb-3">
                        <label class="form-label">Asset Tag</label>
                        <input type="text" class="form-control" id="imagingAssetTag" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="imagingType" class="form-label">Imaging Type <span class="text-danger">*</span></label>
                        <select class="form-select" id="imagingType" required>
                            <option value="">Select imaging type...</option>
                            <option value="Standard">Standard</option>
                            <option value="Enterprise">Enterprise</option>
                            <option value="Developer">Developer</option>
                            <option value="Custom">Custom</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="scheduledDate" class="form-label">Scheduled Date</label>
                        <input type="datetime-local" class="form-control" id="scheduledDate">
                    </div>
                    <div class="mb-3">
                        <label for="imagingNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="imagingNotes" rows="3" placeholder="Special instructions or requirements..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitImagingJob()">
                    <i class="bi bi-check-lg me-2"></i>Create Job
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Asset Details Modal -->
<div class="modal fade" id="assetDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-laptop me-2"></i>Asset Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="assetDetailsContent">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted">Loading asset details...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a id="editAssetLink" href="#" class="btn btn-warning me-auto">
                    <i class="bi bi-pencil me-2"></i>Edit Asset
                </a>
                <a id="fullDetailsLink" href="#" class="btn btn-outline-primary me-2">
                    <i class="bi bi-arrows-fullscreen me-2"></i>Full Details
                </a>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Select All functionality (only if element exists)
        const selectAllCheckbox = document.getElementById('selectAll');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.asset-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateBulkActions();
            });
        }

        // Individual checkbox change (only if checkboxes exist)
        const assetCheckboxes = document.querySelectorAll('.asset-checkbox');
        if (assetCheckboxes.length > 0) {
            assetCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateBulkActions);
            });
        }

        function updateBulkActions() {
            const selected = document.querySelectorAll('.asset-checkbox:checked');
            const count = selected.length;
            const panel = document.getElementById('bulkActionsPanel');
            const countSpan = document.getElementById('selectedCount');
            
            if (panel && countSpan) {
                if (count > 0) {
                    panel.style.display = 'block';
                    countSpan.textContent = `${count} asset${count > 1 ? 's' : ''} selected`;
                } else {
                    panel.style.display = 'none';
                }
            }
        }

        function toggleBulkActions() {
            const panel = document.getElementById('bulkActionsPanel');
            if (panel.style.display === 'none') {
                panel.style.display = 'block';
            } else {
                panel.style.display = 'none';
                // Uncheck all
                document.querySelectorAll('.asset-checkbox').forEach(cb => cb.checked = false);
                document.getElementById('selectAll').checked = false;
            }
        }

        // Enhanced Action Functions
        function confirmDelete(assetId, assetName) {
            document.getElementById('deleteAssetId').value = assetId;
            document.getElementById('deleteAssetName').textContent = assetName;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        function quickStatusChange(assetId, newStatus) {
            if (confirm(`Change asset status to ${newStatus}?`)) {
                // Post to server to update status
                fetch(`/Assets/Index?handler=UpdateStatus`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        assetId: assetId,
                        newStatus: newStatus
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Refresh to show updated status
                    } else {
                        alert('Error updating status: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the status');
                });
            }
        }

        function showAssignModal(assetId, assetTag) {
            document.getElementById('assignAssetId').value = assetId;
            document.getElementById('assignAssetTag').value = assetTag;
            document.getElementById('assignEmployeeId').value = '';
            document.getElementById('assignNotes').value = '';
            new bootstrap.Modal(document.getElementById('assignModal')).show();
        }

        function submitAssignment() {
            const assetId = document.getElementById('assignAssetId').value;
            const employeeId = document.getElementById('assignEmployeeId').value;
            const notes = document.getElementById('assignNotes').value;

            if (!employeeId) {
                alert('Please select an employee');
                return;
            }

            // Post to server to assign asset
            fetch(`/Assets/Index?handler=AssignAsset`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    assetId: assetId,
                    employeeId: employeeId,
                    notes: notes
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('assignModal')).hide();
                    location.reload(); // Refresh to show updated assignment
                } else {
                    alert('Error assigning asset: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while assigning the asset');
            });
        }

        function createImagingJob(assetId, assetTag) {
            document.getElementById('imagingAssetId').value = assetId;
            document.getElementById('imagingAssetTag').value = assetTag;
            document.getElementById('imagingType').value = '';
            document.getElementById('scheduledDate').value = '';
            document.getElementById('imagingNotes').value = '';
            new bootstrap.Modal(document.getElementById('imagingJobModal')).show();
        }

        function submitImagingJob() {
            const assetId = document.getElementById('imagingAssetId').value;
            const imagingType = document.getElementById('imagingType').value;
            const scheduledDate = document.getElementById('scheduledDate').value;
            const notes = document.getElementById('imagingNotes').value;

            if (!imagingType) {
                alert('Please select an imaging type');
                return;
            }

            // Post to server to create imaging job
            fetch(`/Assets/Index?handler=CreateImagingJob`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    assetId: assetId,
                    imagingType: imagingType,
                    scheduledDate: scheduledDate,
                    notes: notes
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('imagingJobModal')).hide();
                    alert('Imaging job created successfully!');
                } else {
                    alert('Error creating imaging job: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while creating the imaging job');
            });
        }

        function showAssetHistory(assetId) {
            const modal = new bootstrap.Modal(document.getElementById('historyModal'));
            modal.show();

            // Load asset history
            fetch(`/Assets/Index?handler=GetAssetHistory&assetId=${assetId}`)
            .then(response => response.json())
            .then(data => {
                const content = document.getElementById('historyContent');
                if (data.success && data.history && data.history.length > 0) {
                    content.innerHTML = `
                        <div class="timeline">
                            ${data.history.map(item => `
                                <div class="timeline-item">
                                    <div class="timeline-marker">
                                        <i class="bi ${getHistoryIcon(item.action)} text-primary"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <h6 class="timeline-title">${item.action}</h6>
                                        <p class="timeline-description">${item.description}</p>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar me-1"></i>${new Date(item.createdAt).toLocaleDateString()}
                                            <i class="bi bi-person ms-2 me-1"></i>${item.performedBy || 'System'}
                                        </small>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                } else {
                    content.innerHTML = `
                        <div class="text-center py-4">
                            <i class="bi bi-clock-history display-1 text-muted"></i>
                            <h5 class="mt-3">No History Found</h5>
                            <p class="text-muted">This asset has no recorded history yet.</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('historyContent').innerHTML = `
                    <div class="text-center py-4">
                        <i class="bi bi-exclamation-triangle display-1 text-danger"></i>
                        <h5 class="mt-3">Error Loading History</h5>
                        <p class="text-muted">Unable to load asset history at this time.</p>
                    </div>
                `;
            });
        }

        function getHistoryIcon(action) {
            const icons = {
                'Created': 'bi-plus-circle',
                'Updated': 'bi-pencil',
                'Assigned': 'bi-person-plus',
                'Unassigned': 'bi-person-dash',
                'Status Changed': 'bi-arrow-repeat',
                'Maintenance': 'bi-wrench',
                'Deployed': 'bi-check-circle',
                'Retired': 'bi-archive'
            };
            return icons[action] || 'bi-circle';
        }

        function exportAssets() {
            // Export functionality to be implemented
            alert('Export functionality will be implemented');
        }

        function bulkUpdateStatus() {
            const selected = Array.from(document.querySelectorAll('.asset-checkbox:checked')).map(cb => cb.value);
            if (selected.length === 0) {
                alert('Please select assets to update');
                return;
            }
            // Bulk update functionality to be implemented
            alert(`Bulk update status for ${selected.length} assets`);
        }

        function bulkAssign() {
            const selected = Array.from(document.querySelectorAll('.asset-checkbox:checked')).map(cb => cb.value);
            if (selected.length === 0) {
                alert('Please select assets to assign');
                return;
            }
            // Bulk assign functionality to be implemented
            alert(`Bulk assign ${selected.length} assets`);
        }

        function bulkDelete() {
            const selected = Array.from(document.querySelectorAll('.asset-checkbox:checked')).map(cb => cb.value);
            if (selected.length === 0) {
                alert('Please select assets to delete');
                return;
            }
            if (confirm(`Are you sure you want to delete ${selected.length} assets? This action cannot be undone.`)) {
                // Bulk delete functionality to be implemented
                alert(`Bulk delete ${selected.length} assets`);
            }
        }

        // Auto-submit form on filter changes (optional)
        document.querySelectorAll('#statusFilter, #typeFilter, #departmentFilter').forEach(select => {
            select.addEventListener('change', function() {
                // Uncomment to enable auto-submit
                // this.form.submit();
            });
        });

        // Enhanced Action Functions
        function showAssetDetailsModal(assetId) {
            const modal = new bootstrap.Modal(document.getElementById('assetDetailsModal'));
            modal.show();

            // Set up modal links
            document.getElementById('editAssetLink').href = `/Assets/Edit/${assetId}`;
            document.getElementById('fullDetailsLink').href = `/Assets/Details/${assetId}`;

            // Load asset details
            fetch(`/Assets/Index?handler=GetAssetDetails&assetId=${assetId}`)
            .then(response => response.json())
            .then(data => {
                const content = document.getElementById('assetDetailsContent');
                if (data.success && data.asset) {
                    const asset = data.asset;
                    const statusClass = getStatusClass(asset.status);
                    const warrantyStatus = asset.warrantyExpiry ? 
                        (new Date(asset.warrantyExpiry) < new Date() ? 'Expired' : 'Active') : 'Not specified';
                    const warrantyClass = warrantyStatus === 'Expired' ? 'text-danger' : 'text-success';

                    content.innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h6 class="card-title mb-0"><i class="bi bi-info-circle me-2"></i>Basic Information</h6>
                                    </div>
                                    <div class="card-body">
                                        <dl class="row">
                                            <dt class="col-5">Asset Tag:</dt>
                                            <dd class="col-7"><span class="badge bg-primary">${asset.assetTag}</span></dd>
                                            <dt class="col-5">PC ID:</dt>
                                            <dd class="col-7">${asset.pcId}</dd>
                                            <dt class="col-5">Type:</dt>
                                            <dd class="col-7">${asset.type}</dd>
                                            <dt class="col-5">Status:</dt>
                                            <dd class="col-7"><span class="badge bg-${statusClass}">${asset.status}</span></dd>
                                            <dt class="col-5">Brand:</dt>
                                            <dd class="col-7">${asset.brand || 'Not specified'}</dd>
                                            <dt class="col-5">Model:</dt>
                                            <dd class="col-7">${asset.model || 'Not specified'}</dd>
                                            <dt class="col-5">Serial #:</dt>
                                            <dd class="col-7">${asset.serialNumber || 'Not specified'}</dd>
                                            <dt class="col-5">Warranty:</dt>
                                            <dd class="col-7">
                                                ${asset.warrantyExpiry ? 
                                                    `<span class="${warrantyClass}">${new Date(asset.warrantyExpiry).toLocaleDateString()} (${warrantyStatus})</span>` :
                                                    '<span class="text-muted">Not specified</span>'
                                                }
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h6 class="card-title mb-0"><i class="bi bi-person-badge me-2"></i>Assignment & Details</h6>
                                    </div>
                                    <div class="card-body">
                                        <dl class="row">
                                            <dt class="col-5">Assigned To:</dt>
                                            <dd class="col-7">${asset.assignedEmployee || 'Unassigned'}</dd>
                                            <dt class="col-5">Department:</dt>
                                            <dd class="col-7">${asset.department || 'None'}</dd>
                                            <dt class="col-5">Imaging Type:</dt>
                                            <dd class="col-7">${asset.imagingType}</dd>
                                            <dt class="col-5">Deployment:</dt>
                                            <dd class="col-7">${asset.deploymentType}</dd>
                                            <dt class="col-5">Created:</dt>
                                            <dd class="col-7">${new Date(asset.createdAt).toLocaleDateString()}</dd>
                                            <dt class="col-5">Last Updated:</dt>
                                            <dd class="col-7">${asset.updatedAt ? new Date(asset.updatedAt).toLocaleDateString() : 'Not updated'}</dd>
                                        </dl>
                                        ${asset.notes ? `
                                            <hr>
                                            <h6>Notes</h6>
                                            <p class="text-muted small">${asset.notes}</p>
                                        ` : ''}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    content.innerHTML = `
                        <div class="text-center py-4">
                            <i class="bi bi-exclamation-triangle display-1 text-danger"></i>
                            <h5 class="mt-3">Error Loading Asset</h5>
                            <p class="text-muted">Unable to load asset details at this time.</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('assetDetailsContent').innerHTML = `
                    <div class="text-center py-4">
                        <i class="bi bi-exclamation-triangle display-1 text-danger"></i>
                        <h5 class="mt-3">Error Loading Asset</h5>
                        <p class="text-muted">Unable to load asset details at this time.</p>
                    </div>
                `;
            });
        }

        function getStatusClass(status) {
            const statusClasses = {
                'Active': 'success',
                'InStock': 'secondary',
                'Maintenance': 'warning',
                'InRepair': 'danger',
                'Retired': 'dark',
                'Assigned': 'info',
                'InDeployment': 'primary',
                'Deployed': 'success',
                'Inactive': 'secondary',
                'Lost': 'danger'
            };
            return statusClasses[status] || 'secondary';
        }

        function duplicateAsset(assetId, assetTag) {
            if (confirm(`Create a duplicate of asset "${assetTag}"?`)) {
                window.location.href = `/Assets/Create?duplicateFrom=${assetId}`;
            }
        }

        function printAssetLabel(assetId, assetTag) {
            // Open print dialog for asset label
            window.open(`/Assets/PrintLabel/${assetId}`, '_blank', 'width=400,height=300');
        }

        function exportAssetData(assetId, assetTag) {
            // Download asset data as JSON/CSV
            window.location.href = `/Assets/Export/${assetId}`;
        }

        function unassignAsset(assetId, assetTag) {
            if (confirm(`Unassign asset "${assetTag}" from the current employee?`)) {
                // Post to server to unassign asset
                fetch(`/Assets/Index?handler=UnassignAsset`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ assetId: assetId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error unassigning asset: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while unassigning the asset');
                });
            }
        }
    </script>
}