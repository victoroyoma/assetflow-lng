<?xml version="1.0"?>
<doc>
    <assembly>
        <name>buildone</name>
    </assembly>
    <members>
        <member name="T:buildone.Authorization.PermissionRequirement">
            <summary>
            Custom authorization requirement for permission-based access control
            </summary>
        </member>
        <member name="T:buildone.Authorization.PermissionHandler">
            <summary>
            Handler for permission-based authorization
            </summary>
        </member>
        <member name="T:buildone.Authorization.Policies">
            <summary>
            Defines authorization policy names used throughout the application
            </summary>
        </member>
        <member name="T:buildone.Authorization.Roles">
            <summary>
            Defines role names used throughout the application
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.ProcessScannedAsset(buildone.Controllers.ProcessScanRequest)">
            <summary>
            Process a scanned asset during audit
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.GetAuditsBySession(System.String)">
            <summary>
            Get audits by session ID
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.GetAuditStatistics(System.String)">
            <summary>
            Get audit statistics
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.GetAudits(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get audits by date range
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.GetAllAssetsForAudit(System.String)">
            <summary>
            Get all assets for audit with their current audit status
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.UpdateAssetStatus(System.Int32,buildone.Controllers.UpdateAssetStatusRequest)">
            <summary>
            Update asset status and location during audit
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.UpdateAuditRecord(System.Int32,buildone.Controllers.UpdateAuditRequest)">
            <summary>
            Update an audit record
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.DeleteAuditRecord(System.Int32,buildone.Controllers.DeleteAuditRequest)">
            <summary>
            Delete an audit record (soft delete with history)
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.GetDeletedHistory(System.String)">
            <summary>
            Get deleted audit history
            </summary>
        </member>
        <member name="M:buildone.Controllers.AssetAuditController.ClearAllAudits">
            <summary>
            Clear all audit records (hard delete all audits and audit delete history)
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.UploadJobAttachment(System.Int32,Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Upload attachment for an imaging job
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.UploadAssetAttachment(System.Int32,Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Upload attachment for an asset
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.GetJobAttachments(System.Int32)">
            <summary>
            Get job attachments
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.GetAssetAttachments(System.Int32)">
            <summary>
            Get asset attachments
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.DownloadJobAttachment(System.Int32)">
            <summary>
            Download job attachment
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.DownloadAssetAttachment(System.Int32)">
            <summary>
            Download asset attachment
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.DeleteJobAttachment(System.Int32)">
            <summary>
            Delete job attachment
            </summary>
        </member>
        <member name="M:buildone.Controllers.AttachmentsController.DeleteAssetAttachment(System.Int32)">
            <summary>
            Delete asset attachment
            </summary>
        </member>
        <member name="M:buildone.Controllers.DataSeedingController.SeedBasicData">
            <summary>
            Seeds basic data (roles and admin user)
            </summary>
            <returns>Success message</returns>
        </member>
        <member name="M:buildone.Controllers.DataSeedingController.SeedBulkData">
            <summary>
            Seeds bulk data (departments, employees, assets, and imaging jobs)
            This will create 10 employees, 400 assets, and 400 imaging jobs
            </summary>
            <returns>Success message with statistics</returns>
        </member>
        <member name="M:buildone.Controllers.DataSeedingController.GetStatistics">
            <summary>
            Gets current database statistics
            </summary>
            <returns>Database statistics</returns>
        </member>
        <member name="M:buildone.Controllers.DataSeedingController.SeedFromExcel(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Seeds data from an uploaded Excel (.xlsx) file. Accepts a multipart/form-data file upload.
            Supports sheets named: Departments, Employees, Assets, Inventory. Sheets not present will be skipped.
            </summary>
        </member>
        <member name="M:buildone.Controllers.NotificationsController.GetNotifications">
            <summary>
            Gets recent notifications including warranty alerts, job updates, and system events
            </summary>
        </member>
        <member name="M:buildone.Controllers.QRCodeController.GenerateAssetQRCode(System.Int32,System.Int32)">
            <summary>
            Generate QR code for an asset by Asset ID
            </summary>
        </member>
        <member name="M:buildone.Controllers.QRCodeController.GenerateAssetURLQRCode(System.Int32,System.Int32)">
            <summary>
            Generate QR code with URL to asset details page
            </summary>
        </member>
        <member name="M:buildone.Controllers.QRCodeController.GetAssetQRCodeBase64(System.Int32,System.Int32)">
            <summary>
            Get QR code as base64 string for inline display
            </summary>
        </member>
        <member name="M:buildone.Controllers.QRCodeController.LookupAssetByQRCode(buildone.Controllers.QRCodeLookupRequest)">
            <summary>
            Lookup asset by QR code scan (asset tag or URL)
            </summary>
        </member>
        <member name="M:buildone.Controllers.SearchController.Search(System.String)">
            <summary>
            Global search across assets, employees, and departments
            </summary>
            <param name="q">Search query</param>
            <returns>Search results grouped by category</returns>
        </member>
        <member name="T:buildone.Data.AssetAudit">
            <summary>
            Represents an asset audit record tracking physical verification of assets
            </summary>
        </member>
        <member name="P:buildone.Data.AssetAudit.AssetId">
            <summary>
            Asset ID if the asset exists, null if it's a new discovery
            </summary>
        </member>
        <member name="P:buildone.Data.AssetAudit.IsNewAsset">
            <summary>
            Indicates if this asset was newly discovered during audit (not in system)
            </summary>
        </member>
        <member name="P:buildone.Data.AssetAudit.PreviousStatus">
            <summary>
            Previous status before audit (for comparison)
            </summary>
        </member>
        <member name="P:buildone.Data.AssetAudit.PreviousLocation">
            <summary>
            Previous location before audit (for comparison)
            </summary>
        </member>
        <member name="P:buildone.Data.AssetAudit.AuditSessionId">
            <summary>
            Audit session ID to group multiple scans in one audit session
            </summary>
        </member>
        <member name="P:buildone.Data.AssetAudit.IsDeleted">
            <summary>
            Soft delete flag - true if record has been deleted from audit
            </summary>
        </member>
        <member name="T:buildone.Data.AssetAuditDeleteHistory">
            <summary>
            Tracks history of deleted asset audit records for audit trail purposes
            </summary>
        </member>
        <member name="T:buildone.Data.ImagingJob">
            <summary>
            Represents a job that can be either an Imaging job or a Maintenance job
            </summary>
        </member>
        <member name="T:buildone.Data.MaintenanceHistory">
            <summary>
            Tracks complete history of all maintenance activities for audit and record purposes
            </summary>
        </member>
        <member name="T:buildone.DTOs.ApiResponse`1">
            <summary>
            Standard API response wrapper for consistent response format
            </summary>
            <typeparam name="T">Type of data being returned</typeparam>
        </member>
        <member name="P:buildone.DTOs.ApiResponse`1.Success">
            <summary>
            Indicates if the operation was successful
            </summary>
        </member>
        <member name="P:buildone.DTOs.ApiResponse`1.Data">
            <summary>
            The response data
            </summary>
        </member>
        <member name="P:buildone.DTOs.ApiResponse`1.Message">
            <summary>
            A message describing the result
            </summary>
        </member>
        <member name="P:buildone.DTOs.ApiResponse`1.Errors">
            <summary>
            List of validation errors or other error messages
            </summary>
        </member>
        <member name="P:buildone.DTOs.ApiResponse`1.Timestamp">
            <summary>
            Timestamp of the response
            </summary>
        </member>
        <member name="P:buildone.DTOs.ApiResponse`1.RequestId">
            <summary>
            Request ID for tracking
            </summary>
        </member>
        <member name="M:buildone.DTOs.ApiResponse`1.SuccessResponse(`0,System.String)">
            <summary>
            Create a successful response
            </summary>
        </member>
        <member name="M:buildone.DTOs.ApiResponse`1.ErrorResponse(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Create an error response
            </summary>
        </member>
        <member name="M:buildone.DTOs.ApiResponse`1.ValidationErrorResponse(System.Collections.Generic.List{System.String})">
            <summary>
            Create a validation error response
            </summary>
        </member>
        <member name="T:buildone.DTOs.AssetResponseDto">
            <summary>
            DTO for Asset responses
            </summary>
        </member>
        <member name="T:buildone.DTOs.CreateAssetDto">
            <summary>
            DTO for creating assets
            </summary>
        </member>
        <member name="T:buildone.DTOs.UpdateAssetDto">
            <summary>
            DTO for updating assets
            </summary>
        </member>
        <member name="T:buildone.DTOs.EmployeeBasicDto">
            <summary>
            Basic employee information for nested DTOs
            </summary>
        </member>
        <member name="T:buildone.DTOs.DepartmentBasicDto">
            <summary>
            Basic department information for nested DTOs
            </summary>
        </member>
        <member name="T:buildone.DTOs.UserResponseDto">
            <summary>
            DTO for user responses
            </summary>
        </member>
        <member name="T:buildone.DTOs.CreateUserDto">
            <summary>
            DTO for creating users
            </summary>
        </member>
        <member name="T:buildone.DTOs.UpdateUserDto">
            <summary>
            DTO for updating users
            </summary>
        </member>
        <member name="T:buildone.Mapping.MappingProfile">
            <summary>
            AutoMapper profile for entity to DTO mappings
            </summary>
        </member>
        <member name="T:buildone.Middleware.GlobalExceptionMiddleware">
            <summary>
            Global exception handling middleware
            </summary>
        </member>
        <member name="T:buildone.Middleware.GlobalExceptionMiddlewareExtensions">
            <summary>
            Extension method to register the middleware
            </summary>
        </member>
        <member name="T:buildone.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.FixSeedData">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.FixSeedData.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.FixSeedData.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.FixSeedData.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddAssetTypeWarrantyLastUpdated">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAssetTypeWarrantyLastUpdated.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAssetTypeWarrantyLastUpdated.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAssetTypeWarrantyLastUpdated.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.DropProductsTable">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.DropProductsTable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.DropProductsTable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.DropProductsTable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.FixDatabaseIssues">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.FixDatabaseIssues.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.FixDatabaseIssues.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.FixDatabaseIssues.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.RemoveDemoData">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.RemoveDemoData.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.RemoveDemoData.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.RemoveDemoData.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddIdentity">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddIdentityFixed">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentityFixed.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentityFixed.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentityFixed.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddIdentityFinalFix">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentityFinalFix.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentityFinalFix.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIdentityFinalFix.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.RemoveStaticSeedData">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.RemoveStaticSeedData.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.RemoveStaticSeedData.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.RemoveStaticSeedData.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddJobQueueEnhancements">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddJobQueueEnhancements.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddJobQueueEnhancements.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddJobQueueEnhancements.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddInventoryModule">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddInventoryModule.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddInventoryModule.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddInventoryModule.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddInventoryWarrantyFields">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddInventoryWarrantyFields.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddInventoryWarrantyFields.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddInventoryWarrantyFields.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddFileAttachments">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddFileAttachments.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddFileAttachments.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddFileAttachments.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddJobTypeToJobs">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddJobTypeToJobs.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddJobTypeToJobs.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddJobTypeToJobs.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddMaintenanceHistory">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddMaintenanceHistory.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddMaintenanceHistory.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddMaintenanceHistory.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddAssetAuditAndLocationToAsset">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAssetAuditAndLocationToAsset.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAssetAuditAndLocationToAsset.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAssetAuditAndLocationToAsset.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddIsAuditedAndLastAuditDateToAsset">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIsAuditedAndLastAuditDateToAsset.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIsAuditedAndLastAuditDateToAsset.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddIsAuditedAndLastAuditDateToAsset.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:buildone.Migrations.AddAuditDeleteHistoryAndSoftDelete">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAuditDeleteHistoryAndSoftDelete.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAuditDeleteHistoryAndSoftDelete.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Migrations.AddAuditDeleteHistoryAndSoftDelete.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:buildone.Services.IExcelDataSeedingService.SeedFromExcelAsync(System.IO.Stream,System.String)">
            <summary>
            Seeds data from an Excel workbook stream. The workbook may contain one or more sheets
            named: Departments, Employees, Assets, Inventory, ImagingJobs. Sheets that are missing
            will be skipped.
            </summary>
            <param name="stream">Input stream for the uploaded Excel (.xlsx) file</param>
            <param name="uploadedBy">Optional user who uploaded the file (Audit)</param>
            <returns>Counts of records processed for each category</returns>
        </member>
        <member name="M:buildone.Services.IFileStorageService.SaveFileAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Saves an uploaded file to storage
            </summary>
            <param name="file">The uploaded file</param>
            <param name="folder">Folder path (e.g., "jobs", "assets")</param>
            <returns>Relative file path</returns>
        </member>
        <member name="M:buildone.Services.IFileStorageService.DeleteFileAsync(System.String)">
            <summary>
            Deletes a file from storage
            </summary>
            <param name="filePath">Relative file path</param>
        </member>
        <member name="M:buildone.Services.IFileStorageService.GetPhysicalPath(System.String)">
            <summary>
            Gets the physical path for a file
            </summary>
            <param name="filePath">Relative file path</param>
            <returns>Full physical path</returns>
        </member>
        <member name="M:buildone.Services.IFileStorageService.FileExistsAsync(System.String)">
            <summary>
            Checks if a file exists
            </summary>
            <param name="filePath">Relative file path</param>
        </member>
        <member name="M:buildone.Services.IFileStorageService.GetFileStreamAsync(System.String)">
            <summary>
            Gets file stream for download
            </summary>
            <param name="filePath">Relative file path</param>
        </member>
        <member name="M:buildone.Services.IQRCodeService.GenerateAssetQRCode(System.String,System.Int32)">
            <summary>
            Generates a QR code for an asset
            </summary>
            <param name="assetTag">Asset tag to encode</param>
            <param name="size">QR code size in pixels (default: 300)</param>
            <returns>PNG image as byte array</returns>
        </member>
        <member name="M:buildone.Services.IQRCodeService.GenerateAssetQRCodeBase64(System.String,System.Int32)">
            <summary>
            Generates a QR code as base64 string for inline display
            </summary>
            <param name="assetTag">Asset tag to encode</param>
            <param name="size">QR code size in pixels (default: 300)</param>
            <returns>Base64 encoded image string</returns>
        </member>
        <member name="M:buildone.Services.IQRCodeService.GenerateAssetURLQRCode(System.Int32,System.String,System.Int32)">
            <summary>
            Generates QR code with URL to asset details page
            </summary>
            <param name="assetId">Asset ID</param>
            <param name="baseUrl">Base URL of the application</param>
            <param name="size">QR code size in pixels</param>
            <returns>PNG image as byte array</returns>
        </member>
        <member name="T:buildone.Validators.CreateAssetValidator">
            <summary>
            Validator for asset creation
            </summary>
        </member>
        <member name="T:buildone.Validators.CreateUserValidator">
            <summary>
            Validator for user creation
            </summary>
        </member>
    </members>
</doc>
